#!/usr/bin/env ruby
# frozen_string_literal: true

require 'csv'
require 'iguvium'
require 'slop'

opts = Slop.parse { |o|
  o.array '-p', '--pages', 'page numbers, comma-separated, no spaces'
  o.bool '-i', '--images', 'use pictures in pdf (usually a bad idea)'
  o.bool '-n', '--newlines', 'keep newlines'
  o.bool '--phrases', 'keep phrases unsplit, could fix some merged cells'
  o.bool '-t', '--text', 'extract full page text instead of tables'
  o.bool '--verbose', 'verbose output'
  o.on '--version', 'print the version' do
    puts Iguvium::VERSION
    exit
  end
  o.on '-h', '--help', 'show help' do
    puts o.to_s.gsub(/(usage:).+(iguvium)/, '\1 \2 filename.pdf')
    puts Iguvium::VERSION
    exit
  end
}

path = opts.args.first

abort('No file name given') unless path

opts = opts.to_hash
page_numbers = opts.delete(:pages).map { |number| number.to_i - 1 }

pages = Iguvium.read(path, **opts)

Iguvium.logger.level = Logger::INFO if opts[:verbose]

page_numbers = pages.count.times.to_a if page_numbers.empty?

# puts page_numbers.inspect
# puts opts.to_hash.inspect

if opts[:text]
  page_numbers.each do |number|
    print "Extracting page #{number + 1}... "
    txt = pages[number].text
    txt_file = "#{path.gsub(/\.pdf$/, '')}_page_#{number + 1}.txt"
    puts "Saving #{File.expand_path txt_file}"
    File.write txt_file, txt
  end
  exit
end

page_numbers.each do |number|
  print "Extracting page #{number + 1}... "
  tables = pages[number].extract_tables!(images: opts[:images])
  tables.empty? ? puts('no tables found') : puts

  tables.each_with_index do |table, i|
    csv = table.to_a(newlines: opts[:newlines], phrases: opts[:phrases]).map(&:to_csv).join
    next if csv.empty?
    csv_file = "#{path.gsub(/\.pdf$/, '')}_page_#{number + 1}_table_#{i}.csv"
    puts "Saving #{File.expand_path csv_file}"
    File.write csv_file, csv
  end
end
